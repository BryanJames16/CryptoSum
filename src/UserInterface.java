/*
 * The MIT License
 *
 * Copyright 2016 Bryan James.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
package CryptoSum;

/**
 * <b><u>Imported Packages</u></b>
 */
import java.awt.GraphicsDevice;
import static java.awt.GraphicsDevice.WindowTranslucency.TRANSLUCENT;
import java.awt.GraphicsEnvironment;
import java.io.File;
import javax.swing.JOptionPane;

/**
 * <h1>UserInterface Class</h1>
 * <p>This file is a part of CryptoSum. Licensed with MIT license.</p>
 * <p>This file is holds all the user interface part of the program.
 * This, file has been called by the Main class and will call ValueGenerator
 * for processing outputs.</p>
 * 
 * @author Bryan James
 * @since 3-20-2016
 * @version 1.0
 */
public class 
    UserInterface 
        extends javax.swing.JFrame 
{
    
    private File    file;
    private File    hashFile;
    
    private int     pointX      =   0;
    private int     pointY      =   0;
    
    /**
     * UserInterface Class constructor
     */
    protected 
        UserInterface() 
    {
        userInit();
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bgType = new javax.swing.ButtonGroup();
        pnlCenter = new javax.swing.JPanel();
        lblFile = new javax.swing.JLabel();
        tfFileName = new javax.swing.JTextField();
        btnChooseFile = new javax.swing.JButton();
        lblHash = new javax.swing.JLabel();
        tfHashName = new javax.swing.JTextField();
        btnChooseHash = new javax.swing.JButton();
        lblHashCode = new javax.swing.JLabel();
        hashScrollPane = new javax.swing.JScrollPane();
        taLogs = new javax.swing.JTextArea();
        cbEnable = new javax.swing.JCheckBox();
        btnCheck = new javax.swing.JButton();
        pnlType = new javax.swing.JPanel();
        rdoSHA256 = new javax.swing.JRadioButton();
        rdoSHA1 = new javax.swing.JRadioButton();
        rdoMD5 = new javax.swing.JRadioButton();
        btnMin = new javax.swing.JButton();
        btnClose = new javax.swing.JButton();
        lblBackground = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("CryptoSum v1.0");
        setMaximumSize(new java.awt.Dimension(384, 268));
        setMinimumSize(new java.awt.Dimension(384, 268));
        setName("cryptosumFrame"); // NOI18N
        setUndecorated(true);
        setPreferredSize(new java.awt.Dimension(384, 268));
        setResizable(false);
        addWindowFocusListener(new java.awt.event.WindowFocusListener() {
            public void windowGainedFocus(java.awt.event.WindowEvent evt) {
                formWindowGainedFocus(evt);
            }
            public void windowLostFocus(java.awt.event.WindowEvent evt) {
                formWindowLostFocus(evt);
            }
        });
        getContentPane().setLayout(null);

        lblFile.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        lblFile.setText("File:");

        tfFileName.setFont(new java.awt.Font("Consolas", 0, 11)); // NOI18N

        btnChooseFile.setText("...");
        btnChooseFile.setToolTipText("Choose a file to hash");
        btnChooseFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChooseFileActionPerformed(evt);
            }
        });

        lblHash.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        lblHash.setText("Hash File:");

        tfHashName.setFont(new java.awt.Font("Consolas", 0, 11)); // NOI18N
        tfHashName.setEnabled(false);

        btnChooseHash.setText("...");
        btnChooseHash.setToolTipText("Choose the file where hash will be compared");
        btnChooseHash.setEnabled(false);
        btnChooseHash.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChooseHashActionPerformed(evt);
            }
        });

        lblHashCode.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        lblHashCode.setText("Logs:");

        taLogs.setEditable(false);
        taLogs.setBackground(new java.awt.Color(0, 0, 0));
        taLogs.setColumns(20);
        taLogs.setFont(new java.awt.Font("Courier New", 0, 13)); // NOI18N
        taLogs.setForeground(new java.awt.Color(0, 153, 0));
        taLogs.setRows(5);
        taLogs.setToolTipText("Generated Hash Code");
        taLogs.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        hashScrollPane.setViewportView(taLogs);

        cbEnable.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        cbEnable.setText("Enable Comparison");
        cbEnable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbEnableActionPerformed(evt);
            }
        });

        btnCheck.setFont(new java.awt.Font("Courier New", 0, 11)); // NOI18N
        btnCheck.setText("Check");
        btnCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCheckActionPerformed(evt);
            }
        });

        pnlType.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Encryption Type"));
        pnlType.setToolTipText("Encryption Type");

        bgType.add(rdoSHA256);
        rdoSHA256.setText("SHA-256");
        rdoSHA256.setToolTipText("Secure Hash Algorithm 256 Encryption");

        bgType.add(rdoSHA1);
        rdoSHA1.setText("SHA-1");
        rdoSHA1.setToolTipText("Secure Hash Algorithm 1 Encryption");

        bgType.add(rdoMD5);
        rdoMD5.setText("MD5");
        rdoMD5.setToolTipText("Message Digest 5 Encryption");

        javax.swing.GroupLayout pnlTypeLayout = new javax.swing.GroupLayout(pnlType);
        pnlType.setLayout(pnlTypeLayout);
        pnlTypeLayout.setHorizontalGroup(
            pnlTypeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlTypeLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(rdoMD5)
                .addGap(18, 18, 18)
                .addComponent(rdoSHA1)
                .addGap(18, 18, 18)
                .addComponent(rdoSHA256)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlTypeLayout.setVerticalGroup(
            pnlTypeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlTypeLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(pnlTypeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rdoMD5)
                    .addComponent(rdoSHA1)
                    .addComponent(rdoSHA256)))
        );

        javax.swing.GroupLayout pnlCenterLayout = new javax.swing.GroupLayout(pnlCenter);
        pnlCenter.setLayout(pnlCenterLayout);
        pnlCenterLayout.setHorizontalGroup(
            pnlCenterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlCenterLayout.createSequentialGroup()
                .addGroup(pnlCenterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlCenterLayout.createSequentialGroup()
                        .addGroup(pnlCenterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblHash)
                            .addComponent(lblFile, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(28, 28, 28)
                        .addGroup(pnlCenterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(tfFileName)
                            .addComponent(tfHashName))
                        .addGap(18, 18, 18)
                        .addGroup(pnlCenterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnChooseFile, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnChooseHash, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(hashScrollPane)
                    .addGroup(pnlCenterLayout.createSequentialGroup()
                        .addGroup(pnlCenterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblHashCode)
                            .addComponent(pnlType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 121, Short.MAX_VALUE))
                    .addGroup(pnlCenterLayout.createSequentialGroup()
                        .addComponent(cbEnable)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnCheck)))
                .addContainerGap())
        );
        pnlCenterLayout.setVerticalGroup(
            pnlCenterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlCenterLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(pnlCenterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblFile)
                    .addComponent(tfFileName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnChooseFile))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlCenterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblHash)
                    .addComponent(tfHashName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnChooseHash))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblHashCode)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(hashScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(7, 7, 7)
                .addGroup(pnlCenterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbEnable)
                    .addComponent(btnCheck))
                .addGap(29, 29, 29))
        );

        getContentPane().add(pnlCenter);
        pnlCenter.setBounds(14, 20, 360, 230);

        btnMin.setAlignmentX(0.7F);
        btnMin.setBorderPainted(false);
        btnMin.setContentAreaFilled(false);
        btnMin.setMaximumSize(new java.awt.Dimension(22, 15));
        btnMin.setMinimumSize(new java.awt.Dimension(22, 15));
        btnMin.setPreferredSize(new java.awt.Dimension(22, 15));
        btnMin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMinActionPerformed(evt);
            }
        });
        getContentPane().add(btnMin);
        btnMin.setBounds(340, 5, 10, 10);

        btnClose.setBorderPainted(false);
        btnClose.setContentAreaFilled(false);
        btnClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCloseActionPerformed(evt);
            }
        });
        getContentPane().add(btnClose);
        btnClose.setBounds(360, 0, 20, 20);

        lblBackground.setIcon(new javax.swing.ImageIcon(getClass().getResource("/CryptoSum/Resources/CrytoSumBG.png"))); // NOI18N
        lblBackground.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                lblBackgroundMouseDragged(evt);
            }
        });
        lblBackground.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                lblBackgroundMousePressed(evt);
            }
        });
        getContentPane().add(lblBackground);
        lblBackground.setBounds(0, 0, 384, 270);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnChooseFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChooseFileActionPerformed
        // TODO add your handling code here:
        javax.swing.JFileChooser  fileChooser = new javax.swing.JFileChooser();
        int option = fileChooser.showOpenDialog( UserInterface.this );
        
        if (option == javax.swing.JFileChooser.APPROVE_OPTION) {
            file = fileChooser.getSelectedFile();
            tfFileName.setText( file.getAbsolutePath() );
        }
    }//GEN-LAST:event_btnChooseFileActionPerformed

    private void cbEnableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbEnableActionPerformed
        // TODO add your handling code here:
        if (cbEnable.isSelected()) {
            tfHashName.setEnabled( true );
            btnChooseHash.setEnabled( true );
        } else {
            tfHashName.setEnabled( false );
            btnChooseHash.setEnabled( false );
        }
    }//GEN-LAST:event_cbEnableActionPerformed

    private void btnChooseHashActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChooseHashActionPerformed
        // TODO add your handling code here:
        javax.swing.JFileChooser  fileChooser = new javax.swing.JFileChooser();
        int option = fileChooser.showOpenDialog( UserInterface.this );
        
        if (option == javax.swing.JFileChooser.APPROVE_OPTION) {
            hashFile = fileChooser.getSelectedFile();
            tfHashName.setText( hashFile.getAbsolutePath() );
        }
    }//GEN-LAST:event_btnChooseHashActionPerformed

    private void btnCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCheckActionPerformed
        
        boolean isCorrect = true;
        String type = "";
        
        // Checks if the user inputs a valid value
        try {
            if (tfFileName.equals("")) {
                isCorrect = false;
                JOptionPane.showMessageDialog (null, "Please enter a valid file name!", "Error", JOptionPane.ERROR_MESSAGE);
            } else {
                file = new java.io.File (tfFileName.getText());
            }
        } catch (NullPointerException npe) {
            isCorrect = false;
            JOptionPane.showMessageDialog (null, "Please enter a valid file name!", "Error", JOptionPane.ERROR_MESSAGE);
        }
        
        // Checks if file exists and can be read
        if (isCorrect) {
            if (!file.exists()) {
                isCorrect = false;
                JOptionPane.showMessageDialog (null, "File not found!", "Error", JOptionPane.ERROR_MESSAGE);
            } else {
                if (!file.canRead()) {
                    isCorrect = false;
                    JOptionPane.showMessageDialog (null, "Cannot read file!", "ERROR", JOptionPane.ERROR_MESSAGE);
                }
            }
        }
        
        // Checks the comparator whether the file exist and can be read
        if (cbEnable.isSelected() && isCorrect) {
            try {
                if (tfHashName.equals("")) {
                    isCorrect = false;
                    JOptionPane.showMessageDialog (null, "Please enter a valid file name!", "Error", JOptionPane.ERROR_MESSAGE);
                } else {
                    hashFile = new java.io.File (tfHashName.getText());
                }
            } catch (NullPointerException npe) {
                isCorrect = false;
                JOptionPane.showMessageDialog (null, "Please enter a valid file name!", "Error", JOptionPane.ERROR_MESSAGE);
            }
            
            if (isCorrect) {
                if (!hashFile.exists()) {
                    isCorrect = false;
                    JOptionPane.showMessageDialog (null, "File not found!", "Error", JOptionPane.ERROR_MESSAGE);
                } else {
                    if (!hashFile.canRead()) {
                        isCorrect = false;
                        JOptionPane.showMessageDialog (null, "Cannot read file!", "ERROR", JOptionPane.ERROR_MESSAGE);
                    }
                }
            } 
        } 
        
        // Checks the encryption type selected
        if (isCorrect) {
            if (rdoMD5.isSelected()) {
                type = "MD5";
            } else if (rdoSHA1.isSelected()) {
                type = "SHA-1";
            } else if (rdoSHA256.isSelected()) {
                type = "SHA-256";
            } else {
                isCorrect = false;
                JOptionPane.showMessageDialog (null, "You did not choose an encryption type!", "ERROR", JOptionPane.ERROR_MESSAGE);
            }
        }
        
        // Call the ValueGenerator class to perform calculation
        if (isCorrect) {
            taLogs.setText ("");
            String currentTexts = taLogs.getText();
            currentTexts += "Generating Values...\n";
            taLogs.setText (currentTexts);
            
            try {
                ValueGenerator valuegen = new ValueGenerator( file, type );
                if (valuegen.getStatus()) {
                    currentTexts = taLogs.getText();
                    currentTexts += "Computation successful!\n" 
                            + "Encryption Method: " + type + "\n"
                            + "Hash Value:\n" + valuegen.getHash() + "\n";
                    taLogs.setText (currentTexts);
                    
                    if (cbEnable.isSelected()) {
                        currentTexts = taLogs.getText();
                        currentTexts += "Comparing values...\n";
                        taLogs.setText (currentTexts);
                        
                        if (valuegen.compareFile (hashFile)) {
                            currentTexts = taLogs.getText();
                            currentTexts += "Values matched!\n";
                            taLogs.setText (currentTexts);
                        } else {
                            currentTexts = taLogs.getText();
                            currentTexts += "Values Do Not Match!\n";
                            taLogs.setText (currentTexts);
                        }
                        
                    } 
                    
                } else {
                    currentTexts = taLogs.getText();
                    currentTexts += "Problem found! Computation aborted!\n" + valuegen.getStatusInfo();
                    taLogs.setText (currentTexts);
                }
            } catch (java.io.FileNotFoundException fnfe) {
                System.err.println ("File not found!\n" + fnfe);
            }
        }
    }//GEN-LAST:event_btnCheckActionPerformed

    private void formWindowGainedFocus(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowGainedFocus
        setOpacity (1.0f);
    }//GEN-LAST:event_formWindowGainedFocus

    private void formWindowLostFocus(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowLostFocus
        setOpacity (1.0f);
    }//GEN-LAST:event_formWindowLostFocus

    private void lblBackgroundMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblBackgroundMousePressed
        pointX = evt.getX();
        pointY = evt.getY();
    }//GEN-LAST:event_lblBackgroundMousePressed

    private void lblBackgroundMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblBackgroundMouseDragged
        setLocation (getLocation().x + evt.getX() - pointX, getLocation().y + evt.getY() - pointY);
    }//GEN-LAST:event_lblBackgroundMouseDragged

    private void btnMinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMinActionPerformed
        setState (java.awt.Frame.ICONIFIED);
    }//GEN-LAST:event_btnMinActionPerformed

    private void btnCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCloseActionPerformed
        dispose();
        System.gc();
        System.exit (0);
    }//GEN-LAST:event_btnCloseActionPerformed
    
    private void userInit() {
        setLocationRelativeTo (null);
        setUndecorated (true);
        setOpacity (1.0f);
        
        GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
        GraphicsDevice gd = ge.getDefaultScreenDevice();
        
        if (!gd.isWindowTranslucencySupported(TRANSLUCENT)) {
            System.err.println ("Translucensy not supported.");
        }
    }
    
    public void launchFrame () {
        /* Set Look And Feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        
        boolean isWindows = false;
        
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    isWindows = true;
                    break;
                }
            }
            
            if (!isWindows) {
                javax.swing.UIManager.setLookAndFeel("Metal");
            }
            
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UserInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UserInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UserInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UserInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new UserInterface().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup bgType;
    private javax.swing.JButton btnCheck;
    private javax.swing.JButton btnChooseFile;
    private javax.swing.JButton btnChooseHash;
    private javax.swing.JButton btnClose;
    private javax.swing.JButton btnMin;
    private javax.swing.JCheckBox cbEnable;
    private javax.swing.JScrollPane hashScrollPane;
    private javax.swing.JLabel lblBackground;
    private javax.swing.JLabel lblFile;
    private javax.swing.JLabel lblHash;
    private javax.swing.JLabel lblHashCode;
    private javax.swing.JPanel pnlCenter;
    private javax.swing.JPanel pnlType;
    private javax.swing.JRadioButton rdoMD5;
    private javax.swing.JRadioButton rdoSHA1;
    private javax.swing.JRadioButton rdoSHA256;
    private javax.swing.JTextArea taLogs;
    private javax.swing.JTextField tfFileName;
    private javax.swing.JTextField tfHashName;
    // End of variables declaration//GEN-END:variables
}
